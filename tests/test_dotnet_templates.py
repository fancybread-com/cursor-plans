"""Tests for .NET template functionality."""

import tempfile
from pathlib import Path

import pytest

from cursor_plans_mcp.execution.engine import PlanExecutor
from cursor_plans_mcp.server import init_dev_planning


class TestDotNetTemplates:
    """Test .NET template functionality."""

    def test_dotnet_templates_generate_content(self):
        """Test that .NET templates generate actual content."""
        with tempfile.TemporaryDirectory() as temp_dir:
            executor = PlanExecutor(temp_dir)

            # Test all .NET templates
            dotnet_templates = [
                ("dotnet_program", "Program.cs", "entry_point"),
                ("dotnet_controller", "BaseController.cs", "api_controller"),
                ("ef_dbcontext", "AppDbContext.cs", "data_context"),
                ("dotnet_service", "AuthService.cs", "service_interface"),
                ("dotnet_csproj", "Project.csproj", "project_file"),
            ]

            for template, file_path, file_type in dotnet_templates:
                content = executor._generate_file_content(
                    file_path, file_type, template
                )

                # Verify content is generated
                assert content is not None
                assert len(content) > 0

                # Verify it's not the basic fallback template (which has a specific format)
                assert not content.startswith("# Generated by Cursor Plans MCP")

                # Verify it contains .NET-specific content
                if template == "dotnet_program":
                    assert "WebApplication" in content
                    assert "AddControllers" in content
                elif template == "dotnet_controller":
                    assert "ControllerBase" in content
                    assert "ApiController" in content
                elif template == "ef_dbcontext":
                    assert "DbContext" in content
                    assert "EntityFrameworkCore" in content
                elif template == "dotnet_service":
                    assert "interface" in content.lower()
                    assert "Task" in content
                elif template == "dotnet_csproj":
                    assert "Microsoft.NET.Sdk.Web" in content
                    assert "TargetFramework" in content

                print(
                    f"âœ… Template '{template}' generates .NET content ({len(content)} chars)"
                )

    @pytest.mark.asyncio
    async def test_dotnet_template_creation(self):
        """Test that dotnet template creates a valid plan."""
        with tempfile.TemporaryDirectory() as temp_dir:
            import os

            os.chdir(temp_dir)

            # Create a minimal context file
            context_content = """
project:
  name: test-project
  type: python
  description: A test project
"""
            context_file = Path(temp_dir) / "context.yaml"
            with open(context_file, "w") as f:
                f.write(context_content)

            result = await init_dev_planning(
                {
                    "context": str(context_file),
                    "name": "test-dotnet-api",
                    "template": "dotnet",
                    "project_directory": temp_dir,
                }
            )

            assert len(result) == 1
            assert "Development Planning Initialized" in result[0].text

            # Check that .cursorplans directory was created but no plan file yet
            cursorplans_dir = Path(temp_dir) / ".cursorplans"
            assert cursorplans_dir.exists()
            plan_file = cursorplans_dir / "test-dotnet-api.devplan"
            assert not plan_file.exists()

            # This test now only checks initialization, not plan creation
            # The plan creation would be tested in a separate prepare test

    def test_dotnet_template_content_quality(self):
        """Test that .NET templates generate high-quality, usable content."""
        with tempfile.TemporaryDirectory() as temp_dir:
            executor = PlanExecutor(temp_dir)

            # Test Program.cs template
            program_content = executor._generate_file_content(
                "Program.cs", "entry_point", "dotnet_program"
            )

            # Should contain essential .NET 8 Web API setup
            assert "WebApplication.CreateBuilder" in program_content
            assert "AddControllers" in program_content
            assert "AddSwaggerGen" in program_content
            assert "app.MapControllers" in program_content
            assert "app.Run" in program_content

            # Test csproj template
            csproj_content = executor._generate_file_content(
                "Project.csproj", "project_file", "dotnet_csproj"
            )

            # Should contain proper .NET 8 project configuration
            assert "Microsoft.NET.Sdk.Web" in csproj_content
            assert "net8.0" in csproj_content
            assert "Microsoft.AspNetCore.Authentication.JwtBearer" in csproj_content
            assert "Microsoft.EntityFrameworkCore.SqlServer" in csproj_content
            assert "Swashbuckle.AspNetCore" in csproj_content
